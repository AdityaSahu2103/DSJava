import java.util.*;

public class BFSGraph {
    private int vertices; // Number of vertices
    private LinkedList<Integer>[] adjacencyList; // Adjacency list

    // Constructor
    public BFSGraph(int vertices) {
        this.vertices = vertices;
        adjacencyList = new LinkedList[vertices];
        for (int i = 0; i < vertices; i++) {
            adjacencyList[i] = new LinkedList<>();
        }
    }

    // Add an edge to the graph
    public void addEdge(int source, int destination) {
        adjacencyList[source].add(destination);
    }

    // Perform BFS starting from a given source
    public void bfs(int startVertex) {
        boolean[] visited = new boolean[vertices]; // To track visited vertices
        Queue<Integer> queue = new LinkedList<>();

        // Start from the given vertex
        visited[startVertex] = true;
        queue.add(startVertex);

        System.out.println("Breadth-First Search (BFS):");

        while (!queue.isEmpty()) {
            int currentVertex = queue.poll();
            System.out.print(currentVertex + " ");

            // Visit all adjacent vertices
            for (int neighbor : adjacencyList[currentVertex]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }
        System.out.println();
    }

    // Main method
    public static void main(String[] args) {
        BFSGraph graph = new BFSGraph(6);

        // Add edges to the graph
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 5);

        // Perform BFS from vertex 0
        graph.bfs(0);
    }
}




import java.util.*;

public class DFSGraph {
    private int vertices; // Number of vertices
    private LinkedList<Integer>[] adjacencyList; // Adjacency list

    // Constructor
    public DFSGraph(int vertices) {
        this.vertices = vertices;
        adjacencyList = new LinkedList[vertices];
        for (int i = 0; i < vertices; i++) {
            adjacencyList[i] = new LinkedList<>();
        }
    }

    // Add an edge to the graph
    public void addEdge(int source, int destination) {
        adjacencyList[source].add(destination);
    }

    // Perform DFS using a recursive helper function
    public void dfs(int startVertex) {
        boolean[] visited = new boolean[vertices]; // To track visited vertices
        System.out.println("Depth-First Search (DFS):");
        dfsHelper(startVertex, visited);
        System.out.println();
    }

    // Recursive DFS helper
    private void dfsHelper(int currentVertex, boolean[] visited) {
        visited[currentVertex] = true;
        System.out.print(currentVertex + " ");

        // Visit all adjacent vertices
        for (int neighbor : adjacencyList[currentVertex]) {
            if (!visited[neighbor]) {
                dfsHelper(neighbor, visited);
            }
        }
    }

    // Main method
    public static void main(String[] args) {
        DFSGraph graph = new DFSGraph(6);

        // Add edges to the graph
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 5);

        // Perform DFS from vertex 0
        graph.dfs(0);
    }
}
